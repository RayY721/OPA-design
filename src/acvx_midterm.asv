%% script for mid-term
close all
clc
clear

%% Parameters
param.c = physconst('LightSpeed');
param.lambda = 1550e-9;
param.fc = param.c/param.lambda;
param.k = 2*pi/param.lambda;
N = 1000;                % to have a aperture of 1020 lambda
d = param.lambda;
L = 1000;             % now Lz = 700 or 900 doesn't work
win.leftend = -18;
win.rightend = 18;
Res = (win.rightend - win.leftend)/(L - 1);
angle = linspace(win.leftend,win.rightend,L)';  % in degree
theta = angle*pi/180;
u = linspace(sin(win.leftend*pi/180),sin(win.rightend*pi/180),L)';
x = (-(N-1)*d/2:d:(N-1)*d/2)';
% x = (0:d:(N-1)*d)';
S = exp(1i*param.k*sin(theta)*x');            % S matrix
S_u = exp(1i*param.k*u*x');
% S_normalized = S./sqrt(N);

%% Set the desired beam pattern (Loose than our requirement) 
% left_win = -0.4;
% right_win = 0.4;
left_win = -0.04;
right_win = 0.04;

desired_pattern = upperboundgen(win.leftend,win.rightend,[left_win right_win],L);       % The desired pattern
figure
plot(angle,desired_pattern)
xlabel('Angle')
ylabel('Amplitude')
title('Ideal beam pattern')

%% Modify the S matrix and reference pattern
loose_range = 0.02;    % in degree   (0.014 is not feasible)
% loose_range = 0.2;

desired_pattern_modified = adjustrefpattern(desired_pattern,[win.leftend win.rightend],[left_win right_win],L,loose_range);

S_new = adjustSmatrix(S,[win.leftend win.rightend],[left_win right_win],L,loose_range);
%% Instead of runnning the following sections, load the result directly. The result is stored at the "W_4_midterm.mat"
load("W_4_midterm.mat")
%% cvx 
cvx_begin
    variable w(N) complex
    minimize(norm(w,1))
    subject to
        norm(S_new*w - desired_pattern_modified,2) <= 0.1;       % 0.1 for L=1000, 0.72 for L=10000
        % norm(S_newn*wn - desired_pattern_with_noise_modified,2) <= 0.1;      
cvx_end

%% weighted l1 norm (epsilon = 0.1)
Z = eye(N);
P = 5;
W_rew = zeros(N,P);
for i = 1:1:P    
cvx_begin
    variable w_rew(N) complex
    minimize(norm(Z*w_rew,1))
    subject to
        norm(S_new*w_rew - desired_pattern_modified,2) <= 0.1;       % 0.1 for L=1000, 0.72 for L=10000   
cvx_end
W_rew(:,i) = w_rew;
Z = inv(diag(abs(w_rew) + 0.0002));
end

%% weighted l1 norm (epsilon = 0.2
Z = eye(N);
P = 5;
W_rew2 = zeros(N,P);
for i = 1:1:P    
cvx_begin
    variable w_rew2(N) complex
    minimize(norm(Z*w_rew2,1))
    subject to
        norm(S_new*w_rew2 - desired_pattern_modified,2) <= 0.2;       % 0.1 for L=1000, 0.72 for L=10000     
cvx_end
W_rew2(:,i) = w_rew2;
Z = inv(diag(abs(w_rew2) + 0.0002));
end
%% The 
semilogy(flip(sort(abs(w))))
title('Sorted distribution of w')
ylabel('Amplitude')
xlabel('Index')
figure
plot(angle,20*log10(abs(S*w)))
title('Array pattern')
ylabel('Intensity(dB)')
xlabel('Angle')

%% plot the weighted result

figure;
for i = 1:1:P
subplot(P,1,i)
semilogy(flip(sort(abs(W_rew(:,i)))))
end
%%
figure;
for i = 1:1:P
subplot(P,1,i)
plot(angle,20*log10(abs(S*W_rew(:,i))))
end

%% compare result between l1 norm and weighted l1 norm
figure
subplot(2,1,1)
semilogy(flip(sort(abs(W_rew(:,1)))))
title('Sorted distribution of w')
ylabel('Amplitude')
xlabel('Index')
subplot(2,1,2)
semilogy(flip(sort(abs(W_rew(:,5)))))
title('Sorted distribution of w')
ylabel('Amplitude')
xlabel('Index')

%% compare pattern between l1 norm and weighted l1 norm
figure
subplot(2,1,1)
plot(angle,20*log10(abs(S*W_rew(:,1))))
title('Original result pattern')
xlabel('Angle')
ylabel('Intensity(dB)')
subplot(2,1,2)
plot(angle,20*log10(abs(S*W_rew(:,5))))
title('Enhanced sparsity pattern')
xlabel('Angle')
ylabel('Intensity(dB)')

%% compare result and pattern between weighted l1 norm with different epsilon
figure
subplot(2,1,1)
semilogy(flip(sort(abs(W_rew(:,5)))))
title('Sorted distribution of w')
ylabel('Amplitude')
xlabel('Index')
subplot(2,1,2)
semilogy(flip(sort(abs(W_rew2(:,5)))))
title('Sorted distribution of w')
ylabel('Amplitude')
xlabel('Index')

figure
subplot(2,1,1)
plot(angle,20*log10(abs(S*W_rew(:,5))))
title('Original result pattern')
xlabel('Angle')
ylabel('Intensity(dB)')
subplot(2,1,2)
plot(angle,20*log10(abs(S*W_rew2(:,5))))
title('Enhanced sparsity pattern')
xlabel('Angle')
ylabel('Intensity(dB)')

%% Thresholding the original result
[cost,th_level,w_th,W,MSE,MSE_new,MSE_app] = iterativethreshold(w,S,0.002);