%% This script perform thresholding and exam the results
close all
clc
clear
%% Parameters
param.c = physconst('LightSpeed');
param.lambda = 1550e-9;
param.fc = param.c/param.lambda;
param.k = 2*pi/param.lambda;

N = 1100;               % to have a sufficient aperture coverage
d = param.lambda;       % A grid with one wavelength spacing
L = 1100;               % so that the sampling interval is small enough
% set the range on which the beampattern matches
fov.left = -18;
fov.right = 18;

% generating the points on which (the grid used for matching) 
angle = linspace(fov.left,fov.right,L)';  % in degree
theta = angle*pi/180;

% The grid to discretize the aperture
x = (-(N-1)*d/2:d:(N-1)*d/2)';
S = exp(1i*param.k*sin(theta)*x');            % S matrix

% Generating the desired beampattern
% The beamwidth is set to be 0.07 degree
beam.left = -0.035;
beam.right = 0.035;
% Call a function to generate a desred beampattern vector 
p_d = desiredbeam(fov.left,fov.right,[beam.left beam.right],L);

%% Perform thresholding on a solution obtained from LASSO problem
load('LASSO_parameters.mat')    % load the epsilon values for later use

% Thresholding the result, choosing the one with epsilon equals 0.50558
epsilon_thresholding = epsilon_all(40);
w_4thresholding = w_epsilon_increase(:,40);
[W_thresheld, E_thresheld] = threshold(w_4thresholding);

% W_thresheld(:,1) is the original solution
% W_thresheld(:,2) is the solution with the smallest entry removed

%% Animation to observe the effects of thresholding
% This section generate a animation of evolve of the solution

fig = figure();
% Define the range for the animation
numFrames = N;

% Loop through each frame and update the plot
for i = 1:5:numFrames           % The animation is generated by removing 5 more entries every time
    % Clear the previous plot
    clf
    % Update the plot
    subplot(2,1,1)
    plot(angle,20*log10(abs(S*W_thresheld(:,i))))
    % yline(10*log10(MSE_app(i)))
    xlim([-18, 18]);
    ylim([-60, 0]);
    title("Beampattern with k =" + nnz(W_thresheld(:,i)));
    % xlabel('X-axis');
    % ylabel('Y-axis');

    subplot(2,1,2)
    stem(abs(W_thresheld(:,i)))
    xlim([0,N])
    
    % Pause for a short time to control animation speed
    pause(0.01);
    % Capture the frame for the animation
    frame = getframe(fig);
    % Convert the frame to an image
    image = frame2im(frame);
    % Write the image to a video file (requires VideoWriter)
    if i == 1
        videoFileName = 'thresholding_animation.avi';
        vidObj = VideoWriter(videoFileName);
        open(vidObj);
    end
    writeVideo(vidObj, image);
end
% Close the video file
close(vidObj);
disp('Animation created successfully.');

%% Exam the results
% Beampattern at k = 1100, 600, 100 in one figure (k = 1100 is the
% original one)
figure
a1 = plot(angle,20*log10(abs(S*W_thresheld(:,1))),'LineWidth', 2);
M1 = "k = " +nnz(W_thresheld(:,1));
hold on
a2 = plot(angle,20*log10(abs(S*W_thresheld(:,601))),'Color',[0.9290 0.6940 0.1250],'LineWidth', 2);
M2 = "k = " +nnz(W_thresheld(:,601));
a3 = plot(angle,20*log10(abs(S*W_thresheld(:,1001))),'Color',[0.4660 0.6740 0.1880],'LineWidth', 2);
M3 = "k = " +nnz(W_thresheld(:,1001));
set(gca, 'FontSize', 26);
xlabel('\theta','fontsize',39);
ylabel('Intensity(dB)','fontsize',38);
title('Beampatterns after thresholding to different sparsity level k','fontsize',38);
% grid on;
legend([a1,a2,a3],[M1,M2,M3],'FontSize',39)
xlim([-18 18])
ylim([-70 0])

% Spatial distribution of excitation at k = 1100, 600, 100 (k = 1100 is the
% original one)
figure
a1 = stem(abs(W_thresheld(:,1)),'LineWidth', 2);
M1 = "k = " +nnz(W_thresheld(:,1));
hold on 
a2 = stem(abs(W_thresheld(:,601)),'Color',[0.9290 0.6940 0.1250],'LineWidth', 2);
M2 = "k = " +nnz(W_thresheld(:,601));
set(gca, 'FontSize', 24);
xlabel('Index','fontsize',37);
ylabel('|\mathbf{w}_k|','fontsize',36);
title('The excitation distribution with different values of epsilon','fontsize',36)
legend([a1,a2],[M1,M2],'FontSize',39)
xlim([0,1100])

figure
a1 = stem(abs(W_thresheld(:,1)),'LineWidth', 2);
M1 = "k = " +nnz(W_thresheld(:,1));
hold on
a3 = stem(abs(W_thresheld(:,1001)),'Color',[0.4660 0.6740 0.1880],'LineWidth', 2);
M3 = "k = " +nnz(W_thresheld(:,1001));
set(gca, 'FontSize', 24);
xlabel('Index','fontsize',37);
ylabel('|\mathbf{w}_k|','fontsize',36);
title('The excitation distribution with different values of epsilon','fontsize',36)
legend([a1,a3],[M1,M3],'FontSize',39)
xlim([0,1100])

% Plot the error distribution k = 100
figure
semilogy(angle,abs(S*(W_thresheld(:,1)-W_thresheld(:,1001))),'LineWidth', 2);
hold on 
semilogy(angle,mean(abs(S*(W_thresheld(:,1)-W_thresheld(:,1001))))*ones(1,L),'LineWidth',3)
set(gca, 'FontSize', 26);
xlabel('\theta','fontsize',39);
ylabel('$|\hat{\textbf{\textit{p}}} - \hat{\textbf{\textit{p}}}_{100}|$','Interpreter','latex','fontsize',38);
xlim([-18 18])
ylim([1e-4 1])

% Plot the error distribution k = 500
figure
semilogy(angle,abs(S*(W_thresheld(:,1)-W_thresheld(:,601))),'LineWidth', 2);
hold on 
semilogy(angle,mean(abs(S*(W_thresheld(:,1)-W_thresheld(:,601))))*ones(1,L),'LineWidth',3)
set(gca, 'FontSize', 26);
xlabel('\theta','fontsize',39);
ylabel('$|\hat{\textbf{\textit{p}}} - \hat{\textbf{\textit{p}}}_{500}|$','Interpreter','latex','fontsize',38);
xlim([-18 18])
ylim([1e-4 1])

% Plot the entries have been set to 0
figure
stem(abs(W_thresheld(:,1)-W_thresheld(:,601)),'LineWidth',2);
set(gca, 'FontSize', 26);
xlabel('Index','fontsize',39);
ylabel('$|\hat{\textbf{\textit{w}}} - \hat{\textbf{\textit{w}}}_{500}|$','Interpreter','latex','fontsize',38);
xlim([0,1100])
ylim([0,2.5e-3])
figure
stem(abs(W_thresheld(:,1)-W_thresheld(:,1001)),'LineWidth',2);
set(gca, 'FontSize', 26);
xlabel('Index','fontsize',39);
ylabel('$|\hat{\textbf{\textit{w}}} - \hat{\textbf{\textit{w}}}_{100}|$','Interpreter','latex','fontsize',38);
xlim([0,1100])
ylim([0,2.5e-3])

% Mesh plot for S^HS
% Display the S^H * S 
[X,Y] = meshgrid(1:N,1:N);
figure
surf(X,Y,real(S'*S))
grid off
set(gca, 'FontSize', 26);
xlabel('Index of Row','FontSize',39)
ylabel('Index of Column','FontSize',39)
zlabel('Amplitude','FontSize',39)

%%
% Plot the beampattern with expected k = 500
figure
plot(angle,20*log10(abs(S*W_thresheld(:,601))),'LineWidth', 2);
set(gca, 'FontSize', 26);
xlabel('\theta','fontsize',39);
ylabel('Intensity(dB)','fontsize',38);
title('Beampatterns after thresholding to different sparsity level k','fontsize',38);
yline(20*log10(mean(abs(S*(W_thresheld(:,1)-W_thresheld(:,601))))),'Color',[0.9290 0.6940 0.1250],'LineWidth',2)
yline(20*log10(norm(W_thresheld(:,1)-W_thresheld(:,601))),'LineWidth',2)

% Plot the beampattern with expected k = 10000
figure
plot(angle,20*log10(abs(S*W_thresheld(:,1001))),'LineWidth', 2);
set(gca, 'FontSize', 26);
xlabel('\theta','fontsize',39);
ylabel('Intensity(dB)','fontsize',38);
title('Beampatterns after thresholding to different sparsity level k','fontsize',38);
yline(20*log10(mean(abs(S*(W_thresheld(:,1)-W_thresheld(:,1001))))),'Color',[0.9290 0.6940 0.1250],'LineWidth',2)
yline(20*log10(norm(W_thresheld(:,1)-W_thresheld(:,1001))),'LineWidth',2)
